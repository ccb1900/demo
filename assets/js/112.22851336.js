(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{498:function(t,v,_){"use strict";_.r(v);var a=_(45),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"红黑树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),_("p",[t._v("红黑树也是二叉搜索树。")]),t._v(" "),_("h2",{attrs:{id:"性质"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性质"}},[t._v("#")]),t._v(" 性质")]),t._v(" "),_("ol",[_("li",[t._v("每一个节点或者是红色，或者是黑色。")]),t._v(" "),_("li",[t._v("根是黑色的。")]),t._v(" "),_("li",[t._v("null节点，也就是叶子节点，都是黑色的。")]),t._v(" "),_("li",[t._v("如果一个节点是红色的，那么他的子节点是黑色的。")]),t._v(" "),_("li",[t._v("从一个节点到一个 null 引用的每一条路径必须包含相同数目的黑色节点。")])]),t._v(" "),_("p",[t._v("红黑树的高度最多是2log(N+1)，所以查找操作是对数操作。")]),t._v(" "),_("p",[t._v("红黑树确保没有一条路径比其余路径长两倍。")]),t._v(" "),_("p",[t._v("节点的黑高。")]),t._v(" "),_("h2",{attrs:{id:"插入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[t._v("#")]),t._v(" 插入")]),t._v(" "),_("p",[t._v("新项作为树叶插入到树中。")]),t._v(" "),_("p",[t._v("如果是黑色，则违反了条件4，路径节点数发生了变化")]),t._v(" "),_("p",[t._v("如果是红色，分两种情况：")]),t._v(" "),_("p",[t._v("如果父节点是黑色，则插入完成。")]),t._v(" "),_("p",[t._v("如果父节点是红色，违反了条件3。因此必须调整这棵树以满足条件3（又不引起4的破坏）。\n用于完成该任务的操作是颜色的改变和树的旋转。")])])}),[],!1,null,null,null);v.default=s.exports}}]);