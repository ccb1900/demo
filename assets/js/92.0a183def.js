(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{484:function(t,a,s){"use strict";s.r(a);var r=s(46),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"生成树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成树"}},[t._v("#")]),t._v(" 生成树")]),t._v(" "),s("p",[t._v("从图的某个顶点出发，可以系统的访问到图中的所有顶点，\n则遍历时经过的边和图的所有顶点所构成的子图，称作该图的生成树。")]),t._v(" "),s("p",[t._v("成功访问的边才可以成为生成树的边。")]),t._v(" "),s("p",[t._v("连通图才有生成树。")]),t._v(" "),s("p",[t._v("边有权重，所有边的权重加起来最小的生成树就是最小生成树。")]),t._v(" "),s("h2",{attrs:{id:"广度优先生成树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广度优先生成树"}},[t._v("#")]),t._v(" 广度优先生成树")]),t._v(" "),s("h2",{attrs:{id:"深度优先生成树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度优先生成树"}},[t._v("#")]),t._v(" 深度优先生成树")])])}),[],!1,null,null,null);a.default=e.exports}}]);