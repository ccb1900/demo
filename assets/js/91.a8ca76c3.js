(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{478:function(t,a,s){"use strict";s.r(a);var r=s(45),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"最短路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最短路径"}},[t._v("#")]),t._v(" 最短路径")]),t._v(" "),s("h2",{attrs:{id:"无权最短路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无权最短路径"}},[t._v("#")]),t._v(" 无权最短路径")]),t._v(" "),s("h2",{attrs:{id:"单源最短路径-dijkstra"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单源最短路径-dijkstra"}},[t._v("#")]),t._v(" 单源最短路径（Dijkstra）")]),t._v(" "),s("h3",{attrs:{id:"算法描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法描述"}},[t._v("#")]),t._v(" 算法描述")]),t._v(" "),s("ol",[s("li",[t._v("以起步的顶点为当前顶点")]),t._v(" "),s("li",[t._v("检查当前顶点的所有邻接点，计算起点到所有已知顶点的权重，并记录下来")]),t._v(" "),s("li",[t._v("从未访问过的邻接点中，选取一个起点能到达的总权重最小的顶点，作为下一个顶点。")]),t._v(" "),s("li",[t._v("重复前三步，直到所有的顶点都被访问过。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);