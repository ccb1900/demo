(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{479:function(t,s,a){"use strict";a.r(s);var e=a(46),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"x86体系结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x86体系结构"}},[t._v("#")]),t._v(" x86体系结构")]),t._v(" "),a("p",[t._v("80386处理器的三种工作模式")]),t._v(" "),a("ul",[a("li",[t._v("实模式")])]),t._v(" "),a("p",[t._v("操作相当于一个可进行32位快速运算的8086")]),t._v(" "),a("ul",[a("li",[t._v("保护模式")])]),t._v(" "),a("p",[t._v("能为内个任务提供一台虚拟处理器，使得每个任务单独执行，快速切换。\n可以区分不同的任务使用的存储区域，不允许随便使用其它任务的数据和代码。")]),t._v(" "),a("p",[t._v("此模式下一个内存地址是由段基地址，偏移地址组成。")]),t._v(" "),a("ul",[a("li",[t._v("虚拟8086模式")])]),t._v(" "),a("p",[t._v("8个32位通用寄存器。")]),t._v(" "),a("p",[t._v("%ebp 栈寄存器")]),t._v(" "),a("p",[t._v("%esp 栈寄存器")]),t._v(" "),a("p",[t._v("保护模式的段模式")]),t._v(" "),a("p",[t._v("段选择器")]),t._v(" "),a("p",[t._v("逻辑地址到物理地址的转换，因为每个任务的地址空间都是一样的。")]),t._v(" "),a("p",[t._v("寄存器没有地址，用名字直接表示。")]),t._v(" "),a("h2",{attrs:{id:"汇编程序的角度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汇编程序的角度"}},[t._v("#")]),t._v(" 汇编程序的角度")]),t._v(" "),a("ul",[a("li",[t._v("指令寄存器：PC（程序计数器），指向下一条指令的地址。（EIP-32或者RIP-64）")]),t._v(" "),a("li",[t._v("寄存器和寄存器堆，在处理器内部以名字来访问的快速存储单元。")]),t._v(" "),a("li",[t._v("条件码，用于存储最近执行指令的结果状态信息，用于条件指令的判断执行。")]),t._v(" "),a("li",[t._v("存储器，以字节编码的连续存储空间，存放程序代码，数据，运行栈以及操作系统数据。")])]),t._v(" "),a("p",[t._v("内存就是cpu的外存。")]),t._v(" "),a("h2",{attrs:{id:"汇编程序的数据格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汇编程序的数据格式"}},[t._v("#")]),t._v(" 汇编程序的数据格式")]),t._v(" "),a("p",[t._v("不同的数据类型在汇编语言中代码的后缀不一样。")]),t._v(" "),a("h2",{attrs:{id:"汇编指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汇编指令"}},[t._v("#")]),t._v(" 汇编指令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("movl Source,Dest\n")])])]),a("ul",[a("li",[t._v("Source,Dest 不能都是内存地址")]),t._v(" "),a("li",[t._v("可以是8个通用寄存器")]),t._v(" "),a("li",[t._v("可以是立即数")]),t._v(" "),a("li",[t._v("可以是内存地址")])]),t._v(" "),a("p",[t._v("(%ecx) 代表此时存储的是内存地址。")]),t._v(" "),a("h2",{attrs:{id:"寻址模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寻址模式"}},[t._v("#")]),t._v(" 寻址模式")]),t._v(" "),a("h3",{attrs:{id:"间接寻址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#间接寻址"}},[t._v("#")]),t._v(" 间接寻址")]),t._v(" "),a("p",[t._v("movl (%ecx),%eax 代表从地址为(%ecx)的内存中取数据，存入到%eax中")]),t._v(" "),a("h3",{attrs:{id:"基地址-偏移量寻址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基地址-偏移量寻址"}},[t._v("#")]),t._v(" 基地址+偏移量寻址")]),t._v(" "),a("p",[t._v("movl 8(%ebp),%edx 代表从地址为(%ebp)+8的内存中取数据，存入到%edx中")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("xp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("yp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" t0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("xp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" t1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("yp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("xp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("yp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),a("div",{staticClass:"language-s extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t.section\t__TEXT,__text,regular,pure_instructions\n\t.build_version macos, 10, 15\tsdk_version 10, 15, 6\n\t.globl\t_swap                   ## -- Begin function swap\n\t.p2align\t4, 0x90\n_swap:                                  ## @swap\n\t.cfi_startproc\n## %bb.0:\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset %ebp, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register %ebp\n\tpushl\t%esi\n\t.cfi_offset %esi, -12\n\tmovl\t12(%ebp), %eax\n\tmovl\t8(%ebp), %ecx\n\tmovl\t(%ecx), %edx\n\tmovl\t(%eax), %esi\n\tmovl\t%esi, (%ecx)\n\tmovl\t%edx, (%eax)\n\tpopl\t%esi\n\tpopl\t%ebp\n\tretl\n\t.cfi_endproc\n                                        ## -- End function\n\n.subsections_via_symbols\n")])])]),a("p",[t._v("%ebp 是基地址，加上偏移量获取到数据。汇编代码有体现。")]),t._v(" "),a("p",[t._v("所以汇编代码是通过地址偏移量体现的真实地址。")])])}),[],!1,null,null,null);s.default=n.exports}}]);